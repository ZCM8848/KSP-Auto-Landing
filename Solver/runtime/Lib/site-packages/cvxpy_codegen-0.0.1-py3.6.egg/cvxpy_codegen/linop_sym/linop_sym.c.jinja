/*
 *  Copyright 2017 Nicholas Moehle
 *  
 *  This file is part of CVXPY-CODEGEN.
 *  
 *  CVXPY-CODEGEN is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  CVXPY-CODEGEN is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with CVXPY-CODEGEN.  If not, see <http://www.gnu.org/licenses/>.
 */

{% import "utils/utils.c.jinja" as u with context %}
#include "codegen.h"


{% macro linop_handler_workspace() %}
    /* Problem coefficients. */
    double obj_coeff[{{ x_length }}];
    double obj_offset;
    double eq_nzval[{{ eq_coeff.nnz }}];
    double eq_offset[{{ eq_dim }}];
    double leq_nzval[{{ leq_coeff.nnz }}];
    double leq_offset[{{ cone_dim }}];

    /* Matrix sparsity patterns. */
    long *leq_colptr;
    long *leq_rowidx;
    long *eq_colptr;
    long *eq_rowidx;
{% endmacro %}



/* Sparsity pattern for the objective and constraint matrices. */
long obj_colptr{{ u.print_vec(leq_coeff.indptr) }};
long obj_rowidx{{ u.print_vec(leq_coeff.indices) }};
long eq_colptr{{ u.print_vec(eq_coeff.indptr) }};
long eq_rowidx{{ u.print_vec(eq_coeff.indices) }};
long leq_colptr{{ u.print_vec(leq_coeff.indptr) }};
long leq_rowidx{{ u.print_vec(leq_coeff.indices) }};



{# TODO: can this be cleaner? #}
{% macro print_sym_expr( expr ) %}
    {% if isinstance(expr, SymMult) -%}
        ( {{ print_sym_expr(expr.args[0]) }} * {{ print_sym_expr(expr.args[1]) }} )
    {%- elif isinstance(expr, SymDiv) -%}
        ( {{ print_sym_expr(expr.args[0]) }} / {{ print_sym_expr(expr.args[1]) }} )
    {%- elif isinstance(expr, SymAdd) -%}
        ({%- for a in expr.args[:-1] -%}
             {{- print_sym_expr(a) }} + 
        {%- endfor -%}
        {{- print_sym_expr(expr.args[-1]) }} )
    {%- elif isinstance(expr, SymParam) -%}
        {%- if isinstance(expr.param, CallbackParam) -%}
            work->{{ expr.param.name() }}_nzval[{{ expr.nz_idx}}]
        {%- else -%}
            {%- if expr.param.size == (1,1) -%}
                params->{{ expr.param.name() }}
            {%- elif expr.param.size[1] == 1 -%}
                params->{{ expr.param.name() }}[{{ expr.idx[0] }}]
            {%- elif expr.param.size[0] == 1 -%}
                params->{{ expr.param.name() }}[{{ expr.idx[1] }}]
            {%- else -%}
                params->{{ expr.param.name() }}[{{ expr.idx[0] }}][{{expr.idx[1] }}]
            {%- endif -%}
        {%- endif -%}
    {%- elif isinstance(expr, SymConst) -%}
        {{ expr.value }}
    {%- endif %}
{% endmacro %}


void linop_init(Work *work){
  work->eq_colptr = eq_colptr;
  work->eq_rowidx = eq_rowidx;
  work->leq_colptr = leq_colptr;
  work->leq_rowidx = leq_rowidx;
}


void fill_matrices(Params *params, Work *work){

  /* Get sparsity patterns. */
  work->leq_colptr = leq_colptr;
  work->leq_rowidx = leq_rowidx;
  work->eq_colptr  = eq_colptr;
  work->eq_rowidx  = eq_rowidx;

  /* Linear part of objective. */
  {% for i, j, p, elem in obj_coeff.as_dense() %}
  work->obj_coeff[{{ p }}] = {{ print_sym_expr(elem) }};
  {%endfor %}

  /* Objective offset. */
  {% for i, j, p, elem in obj_offset.as_dense() %}
  work->obj_offset = {{ print_sym_expr(elem) }};
  {%endfor %}

  /* Linear part of equality constraints. */
  {% for i, j, p, elem in eq_coeff %}
  work->eq_nzval[{{ p }}] = {{ print_sym_expr(elem) }};
  {%endfor %}

  /* Equality constraint offset. */
  {% for i, j, p, elem in eq_offset.as_dense() %}
  work->eq_offset[{{ p }}] = {{ print_sym_expr(elem) }};
  {%endfor %}

  /* Linear part of inequality constraints. */
  {% for i, j, p, elem in leq_coeff %}
  work->leq_nzval[{{ p }}] = {{ print_sym_expr(elem) }};
  {%endfor %}

  /* Inequality constraint offset. */
  {% for i, j, p, elem in leq_offset.as_dense() %}
  work->leq_offset[{{ p }}] = {{ print_sym_expr(elem) }};
  {%endfor %}

}
