{% from 'solvers/'+solver_name+"_intf.c.jinja" import solver_workspace with context %}
{% from 'param/param.c.jinja' import param_handler_workspace with context %}
{% from 'linop_sym/linop_sym.c.jinja' import linop_handler_workspace with context %}
#ifndef CVXPY_CODEGEN
#define CVXPY_CODEGEN

#include "{{ solver_name }}.h"


/* Exit codes: */
#define CG_OPTIMAL     (0)
#define CG_INFEASIBLE  (1)
#define CG_UNBOUNDED   (2)
#define CG_SOLVER_ERR  (3)


typedef struct params_struct{
    {%- for p in named_params -%}
    double {{ p.name -}}
        {%- if p.is_scalar -%}
        {%- elif p.is_column -%}
            [{{ p.size[0] }}]
        {%- elif p.is_row -%}
            [{{ p.size[1] }}]
        {%- else -%}
            [{{ p.size[0] }}][{{ p.size[1] }}]
        {%- endif -%};
    {% endfor %}
} Params;


typedef struct vars_struct{
    {% for var in named_vars %}
    double {{ var.name() }}[{{ var.size[0] }}][{{ var.size[1] }}];
    {% endfor %}
} Vars;


typedef struct work_struct{

    /* Results. */
    double *primal_var;
    double *dual_eq_var;
    double *dual_ineq_var;
    double optval;
    int status;  /* Also returned by cg_solve. */
    long solver_flag;

    /* Variables used by the solver. */
    {{ solver_workspace() }}


    {{ linop_handler_workspace() }}


    {{ param_handler_workspace() }}

    /* Storage for integer and double workspaces. */
    long work_int[{{ work_int }}];
    double work_double[{{ work_float }}];
} Work;


/* Initializes the workspace.  The pointer 'work' must point
 * to a (possibly uninitialized) block of memory with enough
 * space to hold a 'Work' structure.
 * Depending on the solver used, this function may require
 * dynamic memory allocation.
 */
void cg_init(Work *work);


/* Solves the problem.
 * Requires no dynamic memory allocation (and performs no cleanup.)
 * Returns an integer exit code, with values defined at the
 * beginning of this header file.
 *
 * INPUTS:
 * work     - Pointer to a Work workspace that has been initialized
 *            using the using the 'cg_init' function above.
 * params   - Pointer to a Params structure with values initialized 
 *            by the user.
 *
 * OUTPUTS:
 * vars     - Pointer to a Vars structure.  The values in this struct
 *            are uninitialized on input.  On output, they contain
 *            the problem solution.
 */
int cg_solve(Params *params, Work *work, Vars *vars);


/* Deallocates all memory allocated in 'cg_init'.
 * If, for a given solver, 'cg_init' does not require
 * dynamic memory allocation, this function does nothing.
 */
void cg_cleanup(Work *work);


#endif
