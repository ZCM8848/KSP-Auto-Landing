/*
 *  Copyright 2017 Nicholas Moehle
 *  
 *  This file is part of CVXPY-CODEGEN.
 *  
 *  CVXPY-CODEGEN is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  CVXPY-CODEGEN is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with CVXPY-CODEGEN.  If not, see <http://www.gnu.org/licenses/>.
 */

{% import "utils/utils.c.jinja" as u with context %}


{% macro vstack_declare() %}
void vstack(long mA, long mB,
         long *Ap, long *Aj, double *Ax,
         long *Bp, long *Bj, double *Bx,
         long *Zp, long *Zj, double *Zx);
{% endmacro %}


{% macro vstack_define() %}
void vstack(long mA, long mB,
         long *Ap, long *Aj, double *Ax,
         long *Bp, long *Bj, double *Bx,
         long *Zp, long *Zj, double *Zx){
  long i, p, p2, count=0, nnz_A=Ap[mA];

  Zp[0] = 0;
  for (i=0; i<mA; i++){
    p2 = Ap[i+1];
    Zp[i+1] = p2;
    for (p=Ap[i]; p<p2; p++){
      Zj[count]   = Aj[p];
      Zx[count++] = Ax[p];
    }
  }
  for (i=0; i<mB; i++){
    p2 = Bp[i+1];
    Zp[mA+i+1] = nnz_A + p2;
    for (p=Bp[i]; p<p2; p++){
      Zj[count]   = Bj[p];
      Zx[count++] = Bx[p];
    }
  }
}
{% endmacro %}


{% macro vstack_eval(expr) %}
vstack({{ expr.args[0].size[0] }}l, {{ expr.args[1].size[0] }}l, 
{{- u.rowptr(expr.args[0]) }},
{{- u.colidx(expr.args[0]) }},
{{-  u.nzval(expr.args[0]) }},
{{- u.rowptr(expr.args[1]) }},
{{- u.colidx(expr.args[1]) }},
{{-  u.nzval(expr.args[1]) }},
{{- u.rowptr(expr) }},
{{- u.colidx(expr) }},
{{-  u.nzval(expr) }});
{% endmacro %}











{#
  Zp[0] = 0;
  for (i=0; i<m; i++){
    p2 = Ap[i+1];
    Zp[i+1] = Zp[i] + p2;
    for (p=Ap[i]; p<p2; p++){
      Zj[count]   = Aj[p];
      Zx[count++] = Ax[p];
    }
    p2 = Bp[i+1];
    Zp[i+1] += p2;
    for (p=Bp[i]; p<p2; p++){
      Zj[count]   = Bj[p];
      Zx[count++] = Bx[p];
    }
  }
#}
