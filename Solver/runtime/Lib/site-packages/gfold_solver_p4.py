import _gfold_solver_p4 as _intf
import numpy

def cg_solve(sparse_params,x0,g_vec,z0_term_log,z0_term_inv,):

    sparse_params = numpy.ascontiguousarray(numpy.asmatrix(sparse_params), dtype=float)
    if sparse_params.shape != (10, 1):
        raise TypeError("Parameter sparse_params should have shape (10, 1), but has shape %s" % str(sparse_params.shape))
    x0 = numpy.ascontiguousarray(numpy.asmatrix(x0), dtype=float)
    if x0.shape != (6, 1):
        raise TypeError("Parameter x0 should have shape (6, 1), but has shape %s" % str(x0.shape))
    g_vec = numpy.ascontiguousarray(numpy.asmatrix(g_vec), dtype=float)
    if g_vec.shape != (3, 1):
        raise TypeError("Parameter g_vec should have shape (3, 1), but has shape %s" % str(g_vec.shape))
    z0_term_log = numpy.ascontiguousarray(numpy.asmatrix(z0_term_log), dtype=float)
    if z0_term_log.shape != (1, 250):
        raise TypeError("Parameter z0_term_log should have shape (1, 250), but has shape %s" % str(z0_term_log.shape))
    z0_term_inv = numpy.ascontiguousarray(numpy.asmatrix(z0_term_inv), dtype=float)
    if z0_term_inv.shape != (1, 250):
        raise TypeError("Parameter z0_term_inv should have shape (1, 250), but has shape %s" % str(z0_term_inv.shape))

    vars_dict, stats_dict = _intf.solve(sparse_params,x0,g_vec,z0_term_log,z0_term_inv,)

    s = stats_dict['status']
    if s == 0:
        s = 'optimal'
    if s == 1:
        s = 'infeasible'
    if s == 2:
        s = 'unbounded'
    if s == 3:
        s = 'solver error'
    stats_dict['status'] = s

    return vars_dict, stats_dict